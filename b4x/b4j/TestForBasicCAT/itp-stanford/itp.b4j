AppType=JavaFX
Build1=Default,b4j.example
File1=main.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=javaobject
Library4=jokhttputils2
Library5=json
Library6=jstringutils
Library7=byteconverter
Library8=encryption
Module1=nlp
NumberOfFiles=1
NumberOfLibraries=8
NumberOfModules=1
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private ListView1 As ListView
	Private TextArea1 As TextArea
	Private Bconv As ByteConverter
	Private translatedList As List
	Private Button1 As Button
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	translatedList.Initialize
	TextArea1.Text="To me, The Incredibles has always been about nostalgia. When the movie splashed across the silver screen in 2004, it flashed me back to a time and place where comic books could be had for a few cents, and spies and their clever gadgets were everywhere in entertainment and the daily news. These were times of unprecedented advancements in science and technology."
	'TextArea1.Text="When the movie splashed across the silver screen in 2004, it flashed me back to a time and place where comic books could be had for a few cents, and spies and their clever gadgets were everywhere in entertainment and the daily news."
	'TextArea1.Text="If the space visitors come, Pooh — don't tell them where I live!"
	TextArea1.Text="我爱祖国！"
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub Button1_MouseClicked (EventData As MouseEvent)
	'wait for (getAllSegmentTranslation(TextArea1.Text)) complete (result As List)
	'translatedList.AddAll(result)
	'ListView1.Items.AddAll(translatedList)
	wait for (getStanfordTokenizedResult(TextArea1.Text)) complete (result As List)
	ListView1.Items.AddAll(result)
End Sub

Sub TextArea1_TextChanged (Old As String, New As String)
	ListView1.Items.Clear
    For Each item As String In translatedList
		If item.StartsWith(New.SubString(New.Length-1)) Then
			ListView1.Items.Add(item)
		End If
    Next
End Sub

Sub getStanfordTokenizedResult(sentence As String) As ResumableSub
	Dim tokens As List
	tokens.Initialize
	Dim params As String
	Dim su As StringUtils
	params=su.EncodeUrl($"{"annotators":"tokenize","outputFormat":"json"}"$,"UTF-8")
	Dim job As HttpJob
	job.Initialize("job",Me)
	job.PostString("http://localhost:9000/?properties="&params,sentence)
	wait for (job) JobDone(job As HttpJob)
	If job.Success Then
		Log(job.GetString)
		Dim json As JSONParser
		json.Initialize(job.GetString)
		Dim map1 As Map
		map1=json.NextObject
		Dim list1 As List
		list1=map1.Get("tokens")
		For Each token As Map In list1
			tokens.Add(token.Get("word"))
		Next
	End If
	job.Release
	Return tokens
End Sub

Sub getStanfordParsedResult(sentence As String) As ResumableSub
	Dim params As String
	Dim su As StringUtils
	params=su.EncodeUrl($"{"annotators":"parse","outputFormat":"json"}"$,"UTF-8")
	Dim job As HttpJob
	job.Initialize("job",Me)
	job.PostString("http://localhost:9000/?properties="&params,sentence)
	wait for (job) JobDone(job As HttpJob)
	If job.Success Then
		Log(job.GetString)
		Dim json As JSONParser
		json.Initialize(job.GetString)
		Dim map1 As Map
		map1=json.NextObject
		Dim list1 As List
		list1=map1.Get("sentences")
        Dim map2 As Map
		map2=list1.Get(0)
		Dim parse As String
		parse=map2.Get("parse")
		Log(parse)
		Return parse
	End If
	job.Release
	Return ""
End Sub

Sub getAllSegmentTranslation(text As String) As ResumableSub
	Dim translationList As List
	translationList.Initialize
	Dim wordList As List
	wordList.Initialize
	wordList.AddAll(Regex.Split(" ",text))
	'For Each word As String In wordList
	'	wait for (BaiduMT(word,"en","zh")) Complete (result As String)
'		translationList.Add(result)
'	Next
	
	Dim grams As List
	grams.Initialize
	
	wait for (getStanfordParsedResult(text)) Complete (result As String)
	Dim all As List
	all.Initialize
	grams.AddAll(nlp.getGrams(result,all))
	Log("grams"&grams)
	For Each gram As String In grams
		Log(gram)
		wait for (BaiduMT(gram,"en","zh")) Complete (result As String)
		translationList.Add(gram&"	"&result)
	Next
	Return translationList
End Sub

Sub BaiduMT(source As String,sourceLang As String,targetLang As String) As ResumableSub
	sourceLang=sourceLang.ToLowerCase
	targetLang=targetLang.ToLowerCase
	Dim salt As Int
	salt=Rnd(1,1000)
	Dim appid,sign,key As String
	appid=""
	key=""
	sign=appid&source&salt&key
	Dim md As MessageDigest
	sign=Bconv.HexFromBytes(md.GetMessageDigest(Bconv.StringToBytes(sign,"UTF-8"),"MD5"))
	sign=sign.ToLowerCase
	
	Dim su As StringUtils
	source=su.EncodeUrl(source,"UTF-8")
	Dim param As String
	param="?appid="&appid&"&q="&source&"&from="&sourceLang&"&to="&targetLang&"&salt="&salt&"&sign="&sign
	Dim job As HttpJob
	job.Initialize("job",Me)
	job.Download("http://api.fanyi.baidu.com/api/trans/vip/translate"&param)
	wait for (job) JobDone(job As HttpJob)
	Dim target As String
	If job.Success Then
		'Log(job.GetString)
		If job.GetString.Contains("error") Then
			target=""
		Else
			Dim json As JSONParser
			json.Initialize(job.GetString)
			Dim result As List
			result=json.NextObject.Get("trans_result")
			Dim resultMap As Map
			resultMap=result.Get(0)
			target=resultMap.Get("dst")
		End If
	Else
		target=""
	End If
	job.Release
	Return target
End Sub


