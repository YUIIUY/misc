AppType=JavaFX
Build1=Default,b4j.example
File1=main.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jxmlsax
Library4=xmlbuilder
Module1=Map2Xml
Module2=Xml2Map
NumberOfFiles=1
NumberOfLibraries=4
NumberOfModules=2
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private parser As SaxParser
	Private order As List
	Private paragraphStyles,characterStyles As List
	Private taggedText As String
	Private ListView1 As ListView
	Private TextArea1 As TextArea
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	parser.Initialize
	order.Initialize
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub Button1_MouseClicked (EventData As MouseEvent)
	Dim styleXmlMap As Map
	styleXmlMap=getXmlMap(File.ReadString(File.DirApp,"Styles.xml"))
	paragraphStyles=getStyleList(styleXmlMap,"paragraph")
	characterStyles=getStyleList(styleXmlMap,"character")
	Log(paragraphStyles)
	Log(characterStyles)
	getBrContentOrder(File.Combine(File.DirApp,"Story_u19e67.xml"))
	taggedText=getStoryContent(getXmlMap(File.ReadString(File.DirApp,"Story_u19e67.xml")))
	TextArea1.Text=taggedText
End Sub


Sub getStyleList(ParsedData As Map, styleType As String) As List
	Dim result As List
	result.Initialize
	Dim GroupName,styleName As String
	Select styleType
		Case "character"
		    GroupName="RootCharacterStyleGroup"
		    styleName="CharacterStyle"
		Case "paragraph"
		    GroupName="RootParagraphStyleGroup"
		    styleName="ParagraphStyle"
	End Select
	Dim root As Map = ParsedData.Get("idPkg:Styles")
	Dim styleGroup As Map = root.Get(GroupName)
	Dim styles As List
	styles=GetElements(styleGroup,styleName)
	For Each style As Map In styles
		Dim attributes As Map
		attributes=style.Get("Attributes")
		Dim name As String
		name=attributes.Get("Self")
		result.Add(name)
	Next
	Return result
End Sub


Sub getStoryContent(ParsedData As Map) As String
	
	Dim root As Map = ParsedData.Get("idPkg:Story")
	Dim story As Map = root.Get("Story")
	Dim content As String
	Dim ParagraphStyleRanges As List
	ParagraphStyleRanges=GetElements(story,"ParagraphStyleRange")
	For Each ParagraphStyleRange As Map In ParagraphStyleRanges
		Dim paragraphStyleRangeContent As String
		
		Dim paragraphAttributes As Map
		paragraphAttributes=ParagraphStyleRange.Get("Attributes")

		Dim paragraphStyleIndex As String
		paragraphStyleIndex=paragraphStyles.IndexOf(paragraphAttributes.Get("AppliedParagraphStyle"))
		
		Dim CharacterStyleRanges As List
		CharacterStyleRanges=GetElements(ParagraphStyleRange,"CharacterStyleRange")
		
		For Each CharacterStyleRange As Map In CharacterStyleRanges
            Dim characterStyleRangeContent As String
			
			Dim brcontentInOrder As List
			brcontentInOrder.Initialize

			Dim size As Int
			size=GetElements(CharacterStyleRange,"Br").Size+GetElements(CharacterStyleRange,"Content").Size

			For i=0 To Max(0,size-1)
				If order.Size=0 Then
					Exit
				End If
				If order.Get(i)="Br" Then
					brcontentInOrder.Add(CRLF)
				Else
					brcontentInOrder.Add("Content")
				End If
			Next
			For i=0 To Max(0,size-1)
				If order.Size=0 Then
					Exit
				End If
				order.RemoveAt(0)
			Next
			
			Dim attributes As Map
			attributes=CharacterStyleRange.Get("Attributes")
			Dim characterStyleIndex As String
			characterStyleIndex=characterStyles.IndexOf(attributes.Get("AppliedCharacterStyle"))

			For Each key As String In CharacterStyleRange.Keys

	
				If key="Content" Then
					Dim contentList As List
					contentList=GetElements(CharacterStyleRange,"Content")
					Dim j As Int=0
					Do While j<contentList.Size
						For k=0 To brcontentInOrder.Size-1
							If brcontentInOrder.Get(k)="Content" Then

								Dim oneContent As String=contentList.Get(j)
								brcontentInOrder.Set(k,oneContent)
								j=j+1
								Continue
							End If
						Next
					Loop
					For Each item As String In brcontentInOrder
						characterStyleRangeContent=characterStyleRangeContent&item
					Next

					
				End If
			Next
			characterStyleRangeContent=characterStyleRangeContent.Replace(" ","") 'replace LSEP
			If characterStyleRangeContent.EndsWith(CRLF) Then
				characterStyleRangeContent=characterStyleRangeContent.SubString2(0,characterStyleRangeContent.Length-1)
				characterStyleRangeContent="<c"&characterStyleIndex&">"&characterStyleRangeContent&"</c"&characterStyleIndex&">"&CRLF
			Else
				characterStyleRangeContent="<c"&characterStyleIndex&">"&characterStyleRangeContent&"</c"&characterStyleIndex&">"
		    End If
			
			paragraphStyleRangeContent=paragraphStyleRangeContent&characterStyleRangeContent
		Next
		
		If paragraphStyleRangeContent.EndsWith(CRLF) Then
			paragraphStyleRangeContent=paragraphStyleRangeContent.SubString2(0,paragraphStyleRangeContent.Length-1)
			paragraphStyleRangeContent="<p"&paragraphStyleIndex&">"&paragraphStyleRangeContent&"</p"&paragraphStyleIndex&">"&CRLF
		Else
			paragraphStyleRangeContent="<p"&paragraphStyleIndex&">"&paragraphStyleRangeContent&"</p"&paragraphStyleIndex&">"&CRLF
		End If
		content=content&paragraphStyleRangeContent
	Next
    Log(content)
	Return content
End Sub

Sub getBrContentOrder(path As String)
	order.Clear
	parser.Parse(File.OpenInput(path,""),"Parser")
	Log(order)
End Sub


Sub Parser_EndElement (Uri As String, Name As String, Text As StringBuilder)
	If Name="Br" Or Name="Content" Then
		order.Add(Name)
	End If
End Sub

Sub GetElements (m As Map, key As String) As List
	Dim res As List
	If m.ContainsKey(key) = False Then
		res.Initialize
		Return res
	Else
		Dim value As Object = m.Get(key)
		If value Is List Then Return value
		res.Initialize
		res.Add(value)
		Return res
	End If
End Sub

Sub getXmlMap(xmlstring As String) As Map
	Dim ParsedData As Map
	Dim xm As Xml2Map
	xm.Initialize
	ParsedData = xm.Parse(xmlstring)
	Return ParsedData
End Sub

Sub getXmlFromMap(map1 As Map) As String
	Dim result As String
	Dim mx As Map2Xml
	mx.Initialize
	Return mx.MapToXml(map1)
End Sub

Sub Button2_MouseClicked (EventData As MouseEvent)
	Dim storyMap As Map
	storyMap=getXmlMap(File.ReadString(File.DirApp,"Story_u19e67.xml"))
	Dim root As Map = storyMap.Get("idPkg:Story")
	Dim story As Map = root.Get("Story")
	Dim ParagraphStyleRanges As List
	ParagraphStyleRanges=GetElements(story,"ParagraphStyleRange")
	ParagraphStyleRanges.Clear
	Dim matcher As Matcher
	matcher=Regex.Matcher("(?s)<p\d+>.*?</p\d+>",taggedText)
	Dim paragraphsTextList As List
	paragraphsTextList.Initialize
	
	Do While matcher.Find
		paragraphsTextList.Add(matcher.Match)
	Loop
	Log(paragraphsTextList)
	For Each paragraphText As String In paragraphsTextList
		Log(paragraphText)
		Dim paragraphMap As Map
		paragraphMap.Initialize
		paragraphMap=CreateMap("Attributes":CreateMap("AppliedParagraphStyle":paragraphStyles.Get(getStyleIndex(paragraphText,"paragraph"))))
		Dim matcher2 As Matcher
		matcher2=Regex.Matcher("(?s)<c\d+>.*?</c\d+>",paragraphText)
		Dim characterMapsList As List
		characterMapsList.Initialize
		Dim characterTextList As List
		characterTextList.Initialize
		Do While matcher2.Find
			characterTextList.Add(matcher2.Match)
		Loop
		Log(characterTextList)
		For Each characterText As String In characterTextList
			'Log(characterText)
			Dim styleIndex As String
			styleIndex=getStyleIndex(characterText,"character")
			Dim pureText As String=characterText
			Dim tagMatcher As Matcher
			tagMatcher=Regex.Matcher("<.*?>",characterText)
	        Do While tagMatcher.Find
				pureText=pureText.Replace(tagMatcher.Match,"")
			Loop
			'Log(styleIndex)
			characterMapsList.Add(CreateMap("Attributes":CreateMap("AppliedCharacterStyle":characterStyles.Get(styleIndex)),"Content":pureText))
		Next
		paragraphMap.Put("CharacterStyleRange",characterMapsList)
		ParagraphStyleRanges.Add(paragraphMap)
	Next
	TextArea1.Text=getXmlFromMap(storyMap)
End Sub

Sub getStyleIndex(text As String,styleType As String) As Int
	Dim pattern As String
	Select styleType
		Case "character"
			pattern="<c\d+?>"
		Case "paragraph"
			pattern="<p\d+?>"
	End Select
	Log(text)
	Dim styleIndex As String
	Dim indexMatcher As Matcher
	indexMatcher=Regex.Matcher(pattern,text)
	indexMatcher.Find
	styleIndex=indexMatcher.Match
	styleIndex=styleIndex.SubString2(2,styleIndex.Length-1)
	Log("styleindex:"&styleIndex)
	Return styleIndex
End Sub