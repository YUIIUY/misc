AppType=JavaFX
Build1=Default,b4j.example
File1=main.bjl
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jxmlsax
Library4=xmlbuilder
Module1=coordinate
Module2=Map2Xml
Module3=Xml2Map
NumberOfFiles=1
NumberOfLibraries=4
NumberOfModules=3
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private Button1 As Button
	Private Button2 As Button
	Private TextArea1 As TextArea
	Private TextArea2 As TextArea
	Private parser As SaxParser
	Private order As List
	
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	
    parser.Initialize
	order.Initialize
	TextArea1.Text=getXmlMap(File.ReadString(File.DirApp,"Story_u19eb8.xml"))
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub Button2_MouseClicked (EventData As MouseEvent)
	generateXML
End Sub

Sub Button1_MouseClicked (EventData As MouseEvent)
	getBrContentOrder(File.Combine(File.DirApp,"Story_u19eb8.xml"))
	getStoryContent(getXmlMap(File.ReadString(File.DirApp,"Story_u19eb8.xml")))
End Sub

Sub getStoryContent(ParsedData As Map)
	Log(ParsedData)
	Dim root As Map = ParsedData.Get("idPkg:Story")
	Dim story As Map = root.Get("Story")
	Dim content As String
	Dim ParagraphStyleRanges As List
	ParagraphStyleRanges=GetElements(story,"ParagraphStyleRange")
	For Each ParagraphStyleRange As Map In ParagraphStyleRanges

		Dim CharacterStyleRanges As List
		CharacterStyleRanges=GetElements(ParagraphStyleRange,"CharacterStyleRange")
		
		For Each CharacterStyleRange As Map In CharacterStyleRanges
			Log(CharacterStyleRange)
			Dim brcontentInOrder As List
			brcontentInOrder.Initialize
			Log(CharacterStyleRange)
			Dim size As Int
			size=GetElements(CharacterStyleRange,"Br").Size+GetElements(CharacterStyleRange,"Content").Size
			For i=0 To size-1
				If order.Get(i)="Br" Then
					brcontentInOrder.Add(CRLF)
				Else
					brcontentInOrder.Add("Content")
				End If
			Next
			For i=0 To size-1
				order.RemoveAt(0)
			Next
			For Each key As String In CharacterStyleRange.Keys
				Log(key)

				
				If key="Content" Then
					Dim contentList As List
					contentList=GetElements(CharacterStyleRange,"Content")
                    Dim j As Int=0 
					Do While j<contentList.Size
						For k=0 To brcontentInOrder.Size-1
							If brcontentInOrder.Get(k)="Content" Then
								Log(contentList)
								brcontentInOrder.Set(k,contentList.Get(j))
								j=j+1
								Continue
							End If
						Next
					Loop
					For Each item As String In brcontentInOrder
						content=content&item
					Next

					
				End If
			Next

			
		Next
		content=content&CRLF
	Next
	TextArea2.Text=content
End Sub


Sub getBrContentOrder(path As String)
    parser.Parse(File.OpenInput(path,""),"Parser")
	Log(order)
End Sub


Sub Parser_EndElement (Uri As String, Name As String, Text As StringBuilder)
	If Name="Br" Or Name="Content" Then
		order.Add(Name)
	End If
End Sub

Sub generateXML
	Dim xmlmap As Map
	xmlmap=getXmlMap(File.ReadString(File.DirApp,"Story_u19eb8.xml"))
	Dim root As Map = xmlmap.Get("idPkg:Story")
	Dim story As Map = root.Get("Story")
	Log(story)
End Sub

Sub GetElements (m As Map, key As String) As List
	Dim res As List
	If m.ContainsKey(key) = False Then
		res.Initialize
		Return res
	Else
		Dim value As Object = m.Get(key)
		If value Is List Then Return value
		res.Initialize
		res.Add(value)
		Return res
	End If
End Sub

Sub getXmlMap(xmlstring As String) As Map
	Dim ParsedData As Map
	Dim xm As Xml2Map
	xm.Initialize
	ParsedData = xm.Parse(xmlstring)
	Return ParsedData
End Sub

Sub getXmlFromMap(map1 As Map) As String
	Dim result As String
	Dim mx As Map2Xml
	mx.Initialize
	Return mx.MapToXml(map1)
End Sub

