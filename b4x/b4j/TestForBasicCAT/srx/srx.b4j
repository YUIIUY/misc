AppType=JavaFX
Build1=Default,b4j.example
File1=default_rules.srx
File2=main.bjl
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jxmlsax
Library4=xmlbuilder
Module1=Map2Xml
Module2=Xml2Map
Module3=SRX
Module4=Utils
NumberOfFiles=2
NumberOfLibraries=4
NumberOfModules=4
Version=6.51
@EndOfDesignText@
#Region Project Attributes 
	#MainFormWidth: 600
	#MainFormHeight: 600 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private TextArea1 As TextArea
	Private rules As Map
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.RootPane.LoadLayout("main") 'Load the layout file.
	MainForm.Show
	TextArea1.Text="I love you. I am 1.5m tall. My favourite food is rice. Tang is not a famous doctor. Tang is a famous doctor."
End Sub

'Return true to allow the default exceptions handler to handle the uncaught exception.
Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	Return True
End Sub

Sub Button2_MouseClicked (EventData As MouseEvent)
	segment
End Sub

Sub Button1_MouseClicked (EventData As MouseEvent)
	rules=SRX.readRules("","en")
End Sub

Sub segment
	Dim text As String
	text=TextArea1.Text
	Dim breakRules,nonbreakRules As List
	breakRules=rules.Get("breakRules")
	nonbreakRules=rules.Get("nonbreakRules")
	Log(breakRules)
	Log(nonbreakRules)
    Dim previousText As String

	Dim segments As List
	segments.Initialize
	

	Dim breakPositions As List
	breakPositions.Initialize
	breakPositions.AddAll(getPositions(breakRules,text))
	breakPositions.Sort(True)
	removeDuplicated(breakPositions)
	
	Dim nonbreakPositions As List
	nonbreakPositions.Initialize
	nonbreakPositions.AddAll(getPositions(nonbreakRules,text))
	nonbreakPositions.Sort(True)
	removeDuplicated(nonbreakPositions)

    Dim finalBreakPositions As List
	finalBreakPositions.Initialize
	For Each index As Int In breakPositions
		If nonbreakPositions.IndexOf(index)=-1 Then
			finalBreakPositions.Add(index)
		End If
	Next
	Log(breakPositions)
	Log(nonbreakPositions)
	Log(finalBreakPositions)
	For Each index As Int In finalBreakPositions
		segments.Add(text.SubString2(previousText.Length,index))
		previousText=text.SubString2(0,index)
	Next
	If previousText.Length<>text.Length Then
		segments.Add(text.SubString2(previousText.Length,text.Length))
	End If

	TextArea1.Text=""
	For Each seg As String In segments
		TextArea1.Text=TextArea1.Text&seg&"---------"&CRLF
	Next
	Log(segments)
End Sub

Sub removeDuplicated(source As List)
	Dim newList As List
	newList.Initialize
	For Each index As Int In source
		If newList.IndexOf(index)=-1 Then
			newList.Add(index)
		End If
	Next
	source.Clear
	source.AddAll(newList)
End Sub

Sub getPositions(rulesList As List,text As String) As List
	Dim breakPositions As List
	breakPositions.Initialize
	For Each rule As Map In rulesList

		Dim beforeBreak,afterBreak As String
		beforeBreak=rule.Get("beforebreak")
		afterBreak=rule.Get("afterbreak")

		Dim bbm As Matcher
		bbm=Regex.Matcher2(beforeBreak,32,text)

		If beforeBreak<>"null" Then
			
			Do While bbm.Find
				If afterBreak="null" Then
					breakPositions.Add(bbm.GetEnd(0))
				End If
			
				Dim abm As Matcher
				abm=Regex.Matcher2(afterBreak,32,text)
				Do While abm.Find
					If bbm.GetEnd(0)=abm.GetStart(0) Then
						breakPositions.Add(abm.GetEnd(0))
						Exit
					End If
				Loop
			Loop
		Else if afterBreak<>"null" Then
			Dim abm As Matcher
			abm=Regex.Matcher2(afterBreak,32,text)
			Do While abm.Find
				breakPositions.Add(abm.GetEnd(0))
			Loop
		End If
	Next
	
	Return breakPositions
End Sub

Sub Button3_MouseClicked (EventData As MouseEvent)
	TextArea1.Text=TextArea1.Text.Replace("---------"&CRLF,"")
End Sub